{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "09bf5f01",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-12-14T05:00:16.185324Z",
     "iopub.status.busy": "2024-12-14T05:00:16.184943Z",
     "iopub.status.idle": "2024-12-14T05:00:16.984982Z",
     "shell.execute_reply": "2024-12-14T05:00:16.983891Z"
    },
    "papermill": {
     "duration": 0.80587,
     "end_time": "2024-12-14T05:00:16.987351",
     "exception": false,
     "start_time": "2024-12-14T05:00:16.181481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6f25135c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T05:00:16.993948Z",
     "iopub.status.busy": "2024-12-14T05:00:16.993473Z",
     "iopub.status.idle": "2024-12-14T05:00:27.930474Z",
     "shell.execute_reply": "2024-12-14T05:00:27.928817Z"
    },
    "papermill": {
     "duration": 10.942837,
     "end_time": "2024-12-14T05:00:27.933460",
     "exception": false,
     "start_time": "2024-12-14T05:00:16.990623",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nilai Minimum: 1\n",
      "Nilai Maksimum: 1000000\n"
     ]
    }
   ],
   "source": [
    "import multiprocessing\n",
    "\n",
    "# Dataset berisi 10.2 juta angka, di sini kita buat dataset simulasi\n",
    "import random\n",
    "random.seed(42)\n",
    "dataset = [random.randint(1, 1000000) for _ in range(10200000)]  # Dataset 10.2 juta angka\n",
    "\n",
    "# Fungsi Map: Menemukan nilai min dan max dari subset data\n",
    "def map_function(data_subset):\n",
    "    return min(data_subset), max(data_subset)\n",
    "\n",
    "# Fungsi Reduce: Menggabungkan hasil min dan max dari mapper\n",
    "def reduce_function(results):\n",
    "    global_min = min([result[0] for result in results])  # Ambil nilai minimum dari semua mapper\n",
    "    global_max = max([result[1] for result in results])  # Ambil nilai maksimum dari semua mapper\n",
    "    return global_min, global_max\n",
    "\n",
    "# Simulasi Hadoop: Membagi dataset menjadi beberapa blok\n",
    "def simulate_mapreduce(dataset, num_workers=12):\n",
    "    # Membagi dataset menjadi blok\n",
    "    chunk_size = len(dataset) // num_workers\n",
    "    chunks = [dataset[i:i + chunk_size] for i in range(0, len(dataset), chunk_size)]\n",
    "\n",
    "    # Paralel Map Stage\n",
    "    with multiprocessing.Pool(num_workers) as pool:\n",
    "        map_results = pool.map(map_function, chunks)  # Jalankan map function di setiap blok\n",
    "\n",
    "    # Reduce Stage\n",
    "    final_min, final_max = reduce_function(map_results)\n",
    "    return final_min, final_max\n",
    "\n",
    "# Jalankan MapReduce simulasi\n",
    "final_min, final_max = simulate_mapreduce(dataset)\n",
    "\n",
    "print(f\"Nilai Minimum: {final_min}\")\n",
    "print(f\"Nilai Maksimum: {final_max}\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30804,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.186883,
   "end_time": "2024-12-14T05:00:28.758379",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-14T05:00:13.571496",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
